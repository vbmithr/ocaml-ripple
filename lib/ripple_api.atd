(** {2 General types} *)

type int64 = int
  <ocaml repr="int64">
  <biniou repr="int64">

type positive = int <ocaml validator="fun x -> x > 0">

(** {2 Errors} *)

type error = [
  | MissingCommand <json name="missingCommand">
  | UnknownStream <json name="unknownStream">
  | TransactionNotFound <json name="transactionNotFound">
  | ActNotFound <json name="actNotFound"> (* error code 15 *)
  | InvalidParams <json name="invalidParams"> (* error code 26 *)
  | UnknownCmd <json name="unknownCmd"> (* error code 27 *)
]

(** {2 Commands} *)

type command = [
  (* Server info *)
  | Server_info <json name="server_info">
  | Server_state <json name="server_state">
  | Ping <json name="ping">
  (* Stream subscription *)
  | Subscribe <json name="subscribe">
  | Unsubscribe <json name="unsubscribe">
]

(** {2 Requests} *)

type request = {
  id : int;
  command : command;
} <ocaml field_prefix="request_">

(** {2 Responses} *)

type response_status = [
  | Success <json name="success">
  | Error <json name="error">
]

type response = {
  id : int;
  status : response_status;
  (* If an error happens *)
  ?error : error option;
  ?error_message : string option;
  ?request : request option;
} <ocaml field_prefix="response_">

(** {2 Streams} *)

type dyn <ocaml_json module="Yojson.Safe" t="json"> <ocaml_biniou module="Yojson.Safe" t="json"> = abstract

type fields = {
  ?account <json name="Account"> : string option;
  ?book_directory <json name="BookDirectory"> : string option;
  ?book_node <json name="BookNode"> : string option;
  ?flags <json name="Flags"> : int option;
  ?owner_node <json name="OwnerNode"> : string option;
  ?previous_txn_id <json name="PreviousTxnID"> : string option;
  ?previous_txn_lgr_seq <json name="PreviousTxnLgrSeq"> : int option;
  ?sequence <json name="Sequence"> : int option;
  ?taker_gets <json name="TakerGets"> : dyn option;
  ?taker_pays <json name="TakerPays"> : dyn option;
  ?ledger_entry_type <json name="LedgerEntryType"> : string option;
  ?ledger_index <json name="LedgerIndex"> : string option;
} <ocaml field_prefix="fields_">

type node = {
  ledger_entry_type <json name="LedgerEntryType"> : string;
  ledger_index <json name="LedgerIndex"> : string;
  ?final_fields <json name="FinalFields"> : fields option;
  ?previous_fields <json name="PreviousFields"> : fields option;
  ?previous_txn_id <json name="PreviousTxnID"> : string option;
  ?previous_txn_lgr_seq <json name="PreviousTxnLgrSeq"> : int option;
} <ocaml field_prefix="node_">

type affected_node = {
  ?created_node <json name="CreatedNode"> : node option;
  ?modified_node <json name="ModifiedNode"> : node option;
  ?deleted_node <json name="DeletedNode"> : node option;
}

type tx_meta = {
  affected_nodes <json name="AffectedNodes"> : affected_node list;
  transaction_index <json name="TransactionIndex"> : int;
  transactionResult <json name="TransactionResult"> : string;
} <ocaml field_prefix="tx_meta_">

(* https://ripple.com/wiki/Transactions#Basic_Transaction_Format *)
type tx_data = {
  hash : string;
  transaction_type <json name="TransactionType"> : string; (* UInt16 *)
  ?flags <json name="Flags"> : int option; (* UInt32 *)
  account <json name="Account"> : string;
  ?amount <json name="Amount"> : dyn option;
  ?destination <json name="Destination"> : string option;
  fee <json name="Fee"> : string;
  ?invoice_id <json name="InvoiceID"> : string option;
  sequence <json name="Sequence"> : int;
  signing_pub_key <json name="SigningPubKey"> : string;
} <ocaml field_prefix="tx_">

type transaction = {
  engine_result_code: int;
  ledger_hash: string;
  ledger_index: int;
  meta: tx_meta;
  transaction: tx_data;
  ty <json name="type"> : string;
  validated: bool;
} <ocaml field_prefix="tx_msg_">
